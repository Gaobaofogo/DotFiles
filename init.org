* Init Config
** Performance
   #+begin_src emacs-lisp
    (setq gc-cons-threshold (* 100 1024 1024)
	read-process-output-max (* 1024 1024 10)
	treemacs-space-between-root-nodes nil
	company-idle-delay 0.0
	company-minimum-prefix-length 1
	lsp-idle-delay 0.1)  ;; clangd is fast
   #+end_src
** Ajustando a janela e fonte
   #+begin_src emacs-lisp
   (setq inhibit-startup-message t)
   
   (scroll-bar-mode -1)        ; Disable visible scrollbar
   (tool-bar-mode -1)          ; Disable the toolbar
   (tooltip-mode -1)           ; Disable tooltips
   (set-fringe-mode 10)        ; Give some breathing room
   
   (menu-bar-mode -1)            ; Disable the menu bar
   
   ;; Set up the visible bell
   (setq visible-bell t)
   
   (set-face-attribute 'default nil :font "MesloLGS NF")
   #+end_src

** Initialize package sources
   #+begin_src emacs-lisp
   (require 'package)
   (add-to-list 'load-path "~/.emacs_packages/emacs-doom-themes")
   
   (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                            ("org" . "https://orgmode.org/elpa/")
                            ("elpa" . "https://elpa.gnu.org/packages/")))
   
   (package-initialize)
   (unless package-archive-contents
    (package-refresh-contents))
   
   ;; Initialize use-package on non-Linux platforms
   (unless (package-installed-p 'use-package)
      (package-install 'use-package))
   
   (require 'use-package)
   (setq use-package-always-ensure t)
   #+end_src

** Enabling the side lines
   #+begin_src emacs-lisp
   (column-number-mode)
   (global-display-line-numbers-mode t)
   ;; Enable line numbers for some modes
   (dolist (mode '(text-mode-hook
                   prog-mode-hook
                   conf-mode-hook))
     (add-hook mode (lambda () (display-line-numbers-mode 1))))
   
   ;; Override some modes which derive from the above
   (dolist (mode '(org-mode-hook))
     (add-hook mode (lambda () (display-line-numbers-mode 0))))
   #+end_src

** Insert Org Mode
   #+begin_src emacs-lisp
   (use-package org)
   #+end_src
   
* Completion System to Emacs
** Using Ivy
#+begin_src emacs-lisp
  (use-package ivy)
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (global-set-key (kbd "C-s") 'swiper-isearch)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "M-y") 'counsel-yank-pop)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "<f2> j") 'counsel-set-variable)
  (global-set-key (kbd "C-x b") 'ivy-switch-buffer)
  (global-set-key (kbd "C-c v") 'ivy-push-view)
  (global-set-key (kbd "C-c V") 'ivy-pop-view)

  (use-package ivy-rich
    :init (ivy-rich-mode 1))
#+end_src
* Making Emacs beautiful
#+begin_src emacs-lisp
  (use-package all-the-icons)

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(custom-safe-themes
     '("234dbb732ef054b109a9e5ee5b499632c63cc24f7c2383a849815dacc1727cb6" default))
   '(package-selected-packages
     '(apheleia lsp-mode lsp-dart lsp-treemacs flycheck company lsp-ui company hover dap-mode)))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
   (setq company-minimum-prefix-length 1
	 company-idle-delay 0.0) ;; default is 0.2

  ;(use-package dracula-theme)
  ;(load-theme 'dracula t)
  (use-package spacegray-theme :defer t)
  (use-package doom-themes :defer t)
  (load-theme 'doom-wilmersdorf t)
  (doom-themes-visual-bell-config)

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Helpful Emacs
** Keymaps
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode)

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key))

  ; Pacote para definir key-bidings: https://github.com/noctuid/general.el
  (use-package general)
  (general-define-key
   "C-M-j" 'counsel-switch-buffer)
#+end_src

** Evil mode
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))

  (use-package hydra)

  (defhydra hydra-zoom (global-map "<f2>")
    "zoom"
    ("g" text-scale-increase "in")
    ("l" text-scale-decrease "out"))
#+end_src

** Terminal
   #+begin_src emacs-lisp
    (use-package vterm
	:ensure t)
   #+end_src
* Development
** Git using magit
#+begin_src emacs-lisp
(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

** Text completion with Company-Mode
   #+begin_src emacs-lisp
     (use-package company)
     (add-hook 'after-init-hook 'global-company-mode)
   #+end_src
** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("C-c p" . projectile-command-map)))

;;;###autoload
(defun projectile-find-all-occurrences (&optional arg)
  "List all occurrences of the text being searched using completion.
With a prefix argument ARG prompts you for a directory on which to run search in."
  (interactive "P")
  (let ((text-to-search (read-string
                         (projectile-prepend-project-name "Find all: ")
                         (projectile-symbol-or-selection-at-point))))
    (projectile-extras--search-string-in-project "All occurrences_: "
                                                 text-to-search
                                                 arg)))

(defun projectile-extras--search-string-in-project (prompt-text text-to-search &optional arg)
  "Searches for the specified text in project files and displays result with the specified label."
  (let* ((directory (if arg
                        (file-name-as-directory (read-directory-name "Find in directory: "))
                      (projectile-project-root)))
         (files-to-search (projectile-files-with-string text-to-search
                                                        directory)))
    (cl-flet* ((move-to-word-in-result-item (result-item target-word)
                                            (let ((file (car (split-string result-item
                                                                           " => line ")))
                                                  (line-number (string-to-number (cadr (split-string result-item
                                                                                                     " => line ")))))
                                              (find-file (expand-file-name file
                                                                           (projectile-project-root)))
                                              (beginning-of-buffer)
                                              (forward-line (1- line-number))
                                              (search-forward target-word)
                                              (set-mark-command nil)
                                              (search-backward target-word)
                                              (run-hooks 'projectile-find-file-hook)))))
    (projectile-completing-read prompt-text
                                (seq-reduce #'append
                                            (mapcar (lambda (file)
                                                      (with-temp-buffer
                                                        (insert-file-contents file)
                                                        (let ((lines (split-string (buffer-string)
                                                                                   "\n")))
                                                          (cl-remove-if nil
                                                                        (mapcar (lambda (line)
                                                                                  (let ((present-in-linep (string-match-p (regexp-quote text-to-search)
                                                                                                                          line)))
                                                                                    (cond (present-in-linep (concat (cadr (split-string file
                                                                                                                                        (projectile-project-root)))
                                                                                                                    " => line "
                                                                                                                    (number-to-string (1+ (cl-position line
                                                                                                                                                       lines)))))
                                                                                          (t nil))))
                                                                                lines)))))
                                                    files-to-search)
                                            nil)
                                :action `(lambda (item)
                                           (projectile-extras--move-to-word-in-result-item item
                                                                                           ,text-to-search)))))

(setq projectile-completion-system 'ivy)

(use-package counsel-projectile
  :config (counsel-projectile-mode))

(setq projectile-project-search-path '("~/workspace/projects/"))

(with-eval-after-load "projectile"
  (add-to-list 'projectile-project-root-files-bottom-up "pubspec.yaml")
  (add-to-list 'projectile-project-root-files-bottom-up "BUILD"))
#+end_src

** Syntax check with Flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))

(add-hook 'after-init-hook 'global-flycheck-mode)
(setq flycheck-display-errors-function #'flycheck-display-error-messages-unless-error-list)

(use-package flycheck-color-mode-line)

(eval-after-load "flycheck"
  '(add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode))
#+end_src

** Adding Language Server Protocol - LSP
   #+begin_src emacs-lisp
   (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook (;; if you want which-key integration
	(python-mode . lsp-deferred)
	(lsp-mode . lsp-enable-which-key-integration))
	:commands lsp)
   ;; optionally
   (use-package lsp-ui :commands lsp-ui-mode)
   ;; if you are helm user
   (use-package helm-lsp :commands helm-lsp-workspace-symbol)
   ;; if you are ivy user
   (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
   (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

   ; Project errors on modeline
   (with-eval-after-load 'lsp-mode
   ;; :global/:workspace/:file
    (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
    (require 'dap-cpptools)
    (setq lsp-modeline-diagnostics-scope :workspace)
    (yas-global-mode))


   (setq lsp-auto-guess-root t)
   (setq lsp-ui-sideline-enable t)
   #+end_src

** Languages
*** Python
    #+begin_src emacs-lisp
      (setq elpy-rpc-python-command "/usr/bin/python3")

      (use-package lsp-jedi
      :ensure t
      :config
      (with-eval-after-load "lsp-mode"
	  (add-to-list 'lsp-disabled-clients 'pyls)
	  (add-to-list 'lsp-enabled-clients 'jedi)))

      ;(use-package jedi)
      ;(add-hook 'python-mode-hook 'jedi:setup)
      ;(setq jedi:complete-on-dot t)

      ;(use-package elpy
      ;:ensure t
      ;:init
      ;(elpy-enable))

      ;(use-package py-yapf)
      ;(add-hook 'python-mode-hook 'py-yapf-enable-on-save)

      (use-package py-isort)
      (add-hook 'before-save-hook 'py-isort-before-save)
    #+end_src

*** Javascript/TypeScript
    #+begin_src emacs-lisp
	    ;Todos os pacotes que tentei falharam. Preciso ver como vou fazer ainda
    (use-package prettier)
    (add-hook 'after-init-hook #'global-prettier-mode)
    #+end_src

*** Common Lisp
    #+begin_src emacs-lisp
    (setq inferior-lisp-program "sbcl")
    #+end_src

*** C++
Eglot is a LSP for C/C++ that uses clangd as backend

#+begin_src emacs-lisp
(use-package eglot)
(add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd"))
(add-hook 'c-mode-hook 'eglot-ensure)
(add-hook 'c++-mode-hook 'eglot-ensure)
#+end_src
